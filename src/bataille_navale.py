"""
Module bataille_navale
Ce module impl√©mente un jeu de bataille navale simple en Python.
"""

import random
from typing import Tuple

# Constantes globales
TAILLE_MIN = 3  # Taille minimale autoris√©e pour la grille
TAILLE_MAX = 10  # Taille maximale autoris√©e pour la grille
NB_BATEAUX = 3  # Nombre de bateaux √† placer sur la grille

def creer_grille(taille):
    """
    Cr√©e une grille vide de taille donn√©e.
    :param taille: Taille de la grille (entier).
    :return: Grille sous forme de liste de listes.
    """
    return [["~"] * taille for _ in range(taille)]

def afficher_grille(grille):
    """
    Affiche la grille en masquant les bateaux.
    :param grille: Grille √† afficher.
    """
    for ligne in grille:
        print(" ".join("~" if case == "B" else case for case in ligne))
    print()

def placer_bateaux(grille, nombre_bateaux):
    """
    Place un nombre donn√© de bateaux al√©atoirement sur la grille.
    :param grille: Grille o√π placer les bateaux.
    :param nombre_bateaux: Nombre de bateaux √† placer.
    :return: Liste des positions des bateaux.
    """
    bateaux = []
    taille_grille = len(grille)
    while len(bateaux) < nombre_bateaux:
        x = random.randint(0, taille_grille - 1)
        y = random.randint(0, taille_grille - 1)

        if grille[x][y] == "~":
            grille[x][y] = "B"
            bateaux.append((x, y))
    return bateaux

def demander_taille_grille():
    """
    Demande √† l'utilisateur de choisir la taille de la grille.
    - V√©rifie que l'entr√©e est un entier.
    - V√©rifie que la taille est dans les limites d√©finies.
    :return: Taille de la grille (entier).
    """
    while True:
        try:
            taille = int(input(f"Entrez la taille de la grille ({TAILLE_MIN}-{TAILLE_MAX}): "))
            if TAILLE_MIN <= taille <= TAILLE_MAX:
                return taille
            print(f"Erreur: La taille doit √™tre entre {TAILLE_MIN} et {TAILLE_MAX}.")
        except ValueError:
            print("Erreur: Veuillez entrer un nombre entier valide.")


def demander_coordonnees(taille: int = TAILLE_MAX) -> Tuple[int, int]:
    """Lit et retourne une saisie utilisateur au format "ligne,col".

    Valide que les coordonn√©es sont au bon format et dans les limites de la grille.
    Redemande une saisie tant que l'entr√©e n'est pas valide.
    Args:
        taille: taille de la grille pour valider les limites (par d√©faut: TAILLE)
    Returns:
    Un tuple (x, y) contenant les coordonn√©es saisies par l'utilisateur.
    Peut aussi saisir 'retry' pour recommencer ou 'exit' pour quitter instead of les coordonnees .
    """
    while True:
        val = input("S√©lectionnez une case ligne,col ou 'retry' ou 'exit' : ").strip().lower()
        if val in ("retry", "exit"):
            return val
        # Extraire et convertir les valeurs
        try:
            x, y = map(int, val.split(","))
            # V√©rifier les limites
            if x < 0 or x >= taille or y < 0 or y >= taille:
                print(f"Coordonn√©es hors limites! Entrez des valeurs entre 0 et {taille-1}")
                continue
            return x, y
        except ValueError:
            print("Entr√©e invalide. Exemple valide : 1,2")


def confirmation_retry_exit(message):
    """Demande une confirmation yes/no au user pour quitter(exit) ou recommencer(retry) le jeu.
    Args:
        message: message √† afficher pour la confirmation.
    Returns:
        True si l'utilisateur confirme (yes), False sinon (no).
    """
    while True:
        rep = input(f"{message} (yes/no) : ").strip().lower()
        if rep in ["yes", "y"]:
            return True
        if rep in ["no", "n"]:
            return False
        print("R√©ponse invalide. Tapez 'yes' ou 'no'.")



def jouer() -> None:
    """Boucle de jeu console minimaliste.

    Place des bateaux puis demande des coordonn√©es tant que tous les
    bateaux n'ont pas √©t√© touch√©s.
    """
    print("Bienvenue √† la bataille navale!")

    # Demander la taille de la grille √† l'utilisateur
    taille = demander_taille_grille()

    # Cr√©er la grille et placer les bateaux
    grille = creer_grille(taille)
    placer_bateaux(grille, NB_BATEAUX)

    nb_succes = 0
    while nb_succes < NB_BATEAUX:
        print("Grille:")
        afficher_grille(grille)

        try:
            coord = demander_coordonnees()
            if coord == "retry":
                if confirmation_retry_exit("Voulez-vous vraiment recommencer le jeu?"):
                    return True
                continue
            if coord == "exit":
                if confirmation_retry_exit("Voulez-vous vraiment quitter le jeu?"):
                    print("Merci d'avoir jou√©! Au revoir! üëã")
                    return False
                continue
            x, y = coord

            # V√©rifier si les coordonn√©es sont valides
            if not (0 <= x < taille and 0 <= y < taille):
                print("Coordonn√©es hors limites. R√©essayez.")
                continue

            if grille[x][y] == "B":
                print("Touch√©! üéØ")
                grille[x][y] = "X"
                nb_succes += 1
            elif grille[x][y] == "~":
                print("Rat√©! ‚ùå")
                grille[x][y] = "O"
            else:
                print("Vous avez d√©j√† tir√© ici. R√©essayez.")
        except IndexError:
            print("Coordonn√©es invalides. R√©essayez.")

    print("\nBravo! Vous avez coul√© tous les bateaux! üéâ")
    afficher_grille(grille)
    if confirmation_retry_exit("Voulez-vous rejouer ?"):
        return True
    return False

def main():
    """boucle principale pour g√©rer le replay."""
    while True:
        rejouer = jouer()
        if not rejouer:
            break

if __name__ == "__main__":
    main()
